class PineScriptGenerator:
    """
    Generate TradingView PineScript code for optimized trading strategies
    """
    
    @staticmethod
    def generate_moving_average_strategy(fast_ma, slow_ma, symbol="SPY"):
        """Generate PineScript for Moving Average Crossover Strategy"""
        script = f'''// AI-Optimized Moving Average Strategy
// Optimized parameters: Fast MA = {fast_ma}, Slow MA = {slow_ma}
// Generated by Quantitative Finance Platform

//@version=5
strategy("AI Optimized MA Strategy", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// Input parameters (optimized by AI)
fastLength = input.int({fast_ma}, title="Fast MA Length", minval=1)
slowLength = input.int({slow_ma}, title="Slow MA Length", minval=1)

// Calculate moving averages
fastMA = ta.sma(close, fastLength)
slowMA = ta.sma(close, slowLength)

// Plot moving averages
plot(fastMA, color=color.blue, title="Fast MA")
plot(slowMA, color=color.red, title="Slow MA")

// Strategy conditions
longCondition = ta.crossover(fastMA, slowMA)
shortCondition = ta.crossunder(fastMA, slowMA)

// Execute trades
if (longCondition)
    strategy.entry("Long", strategy.long)

if (shortCondition)
    strategy.close("Long")

// Visual signals
plotshape(longCondition, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.labelup, text="BUY")
plotshape(shortCondition, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.labeldown, text="SELL")

// Background color for trend
bgcolor(fastMA > slowMA ? color.new(color.green, 95) : color.new(color.red, 95))'''
        return script
    
    @staticmethod
    def generate_rsi_strategy(rsi_period, oversold, overbought, symbol="SPY"):
        """Generate PineScript for RSI Mean Reversion Strategy"""
        script = f'''// AI-Optimized RSI Strategy
// Optimized parameters: RSI Period = {rsi_period}, Oversold = {oversold}, Overbought = {overbought}
// Generated by Quantitative Finance Platform

//@version=5
strategy("AI Optimized RSI Strategy", overlay=false, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// Input parameters (optimized by AI)
rsiLength = input.int({rsi_period}, title="RSI Length", minval=1)
oversoldLevel = input.int({oversold}, title="Oversold Level", minval=1, maxval=50)
overboughtLevel = input.int({overbought}, title="Overbought Level", minval=50, maxval=100)

// Calculate RSI
rsiValue = ta.rsi(close, rsiLength)

// Plot RSI
plot(rsiValue, title="RSI", color=color.purple)
hline(oversoldLevel, "Oversold", color=color.red)
hline(overboughtLevel, "Overbought", color=color.red)
hline(50, "Midline", color=color.gray)

// Strategy conditions
longCondition = rsiValue < oversoldLevel
shortCondition = rsiValue > overboughtLevel

// Execute trades
if (longCondition)
    strategy.entry("Long", strategy.long)

if (shortCondition)
    strategy.close("Long")

// Visual signals
plotshape(longCondition, title="Buy Signal", location=location.bottom, color=color.green, style=shape.labelup, text="BUY")
plotshape(shortCondition, title="Sell Signal", location=location.top, color=color.red, style=shape.labeldown, text="SELL")

// Background color
bgcolor(rsiValue < oversoldLevel ? color.new(color.green, 90) : rsiValue > overboughtLevel ? color.new(color.red, 90) : na)'''
        return script
    
    @staticmethod
    def generate_risk_adjusted_strategy(base_strategy_params, symbol="SPY"):
        """Generate PineScript for Risk-Adjusted Strategy with Dynamic Position Sizing"""
        if base_strategy_params.get('strategy_type') == 'moving_average':
            fast_ma = base_strategy_params.get('fast_ma', 20)
            slow_ma = base_strategy_params.get('slow_ma', 50)
            
            script = f'''// AI Risk-Adjusted Moving Average Strategy
// Features: Dynamic Position Sizing, Volatility Filters, Drawdown Protection
// Generated by Quantitative Finance Platform

//@version=5
strategy("AI Risk-Adjusted Strategy", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// Input parameters
fastLength = input.int({fast_ma}, title="Fast MA Length", minval=1)
slowLength = input.int({slow_ma}, title="Slow MA Length", minval=1)
volTarget = input.float(0.15, title="Volatility Target", minval=0.05, maxval=0.5, step=0.01)
maxPosition = input.float(2.0, title="Max Position Size", minval=0.1, maxval=5.0, step=0.1)

// Calculate indicators
fastMA = ta.sma(close, fastLength)
slowMA = ta.sma(close, slowLength)
returns = math.log(close / close[1])
volatility = ta.stdev(returns, 20) * math.sqrt(252)

// Dynamic position sizing
positionSize = math.min(volTarget / (volatility + 0.001), maxPosition)

// Volatility filter
highVolFilter = volatility > ta.percentile_linear_interpolation(volatility, 50, 80)
volAdjustment = highVolFilter ? 0.5 : 1.0

// Drawdown calculation
equity = strategy.equity
runningMax = ta.highest(equity, 252)
drawdown = (equity - runningMax) / runningMax

// Drawdown filter
drawdownFilter = drawdown < -0.05 ? 0.5 : drawdown < -0.10 ? 0.2 : 1.0

// Final position size
finalSize = positionSize * volAdjustment * drawdownFilter

// Strategy conditions
longCondition = ta.crossover(fastMA, slowMA)
shortCondition = ta.crossunder(fastMA, slowMA)

// Execute trades with dynamic sizing
if (longCondition)
    strategy.entry("Long", strategy.long, qty=finalSize)

if (shortCondition)
    strategy.close("Long")

// Plot indicators
plot(fastMA, color=color.blue, title="Fast MA")
plot(slowMA, color=color.red, title="Slow MA")

// Plot position size indicator
plot(finalSize, title="Position Size", color=color.orange, display=display.data_window)

// Visual signals
plotshape(longCondition, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.labelup, text="BUY")
plotshape(shortCondition, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.labeldown, text="SELL")

// Risk info table
if barstate.islast
    var table infoTable = table.new(position.top_right, 2, 5, bgcolor=color.white, border_width=1)
    table.cell(infoTable, 0, 0, "Metric", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 0, 1, "Volatility", text_color=color.black)
    table.cell(infoTable, 1, 1, str.tostring(volatility, "#.##%"), text_color=color.black)
    table.cell(infoTable, 0, 2, "Position Size", text_color=color.black)
    table.cell(infoTable, 1, 2, str.tostring(finalSize, "#.##"), text_color=color.black)
    table.cell(infoTable, 0, 3, "Drawdown", text_color=color.black)
    table.cell(infoTable, 1, 3, str.tostring(drawdown, "#.##%"), text_color=color.black)'''
            return script
        
        return "// Risk-adjusted strategy generation requires base strategy parameters"
    
    @staticmethod
    def generate_ensemble_strategy(components, symbol="SPY"):
        """Generate PineScript for AI Ensemble Strategy"""
        script = f'''// AI Ensemble Strategy
// Combines multiple signals: {", ".join(components)}
// Generated by Quantitative Finance Platform

//@version=5
strategy("AI Ensemble Strategy", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// Input parameters
maFast = input.int(20, title="Fast MA")
maSlow = input.int(50, title="Slow MA")
rsiLength = input.int(14, title="RSI Length")
bbLength = input.int(20, title="BB Length")
bbStdev = input.float(2.0, title="BB StdDev")

// Calculate indicators
fastMA = ta.sma(close, maFast)
slowMA = ta.sma(close, maSlow)
rsiValue = ta.rsi(close, rsiLength)
bbUpper = ta.sma(close, bbLength) + ta.stdev(close, bbLength) * bbStdev
bbLower = ta.sma(close, bbLength) - ta.stdev(close, bbLength) * bbStdev

// Individual signals
maSignal = fastMA > slowMA ? 1 : -1
rsiSignal = rsiValue < 30 ? 1 : rsiValue > 70 ? -1 : 0
bbSignal = close < bbLower ? 1 : close > bbUpper ? -1 : 0

// Ensemble signal (weighted combination)
ensembleSignal = (maSignal * 0.4) + (rsiSignal * 0.3) + (bbSignal * 0.3)

// Strategy conditions
longCondition = ensembleSignal > 0.5 and ensembleSignal[1] <= 0.5
shortCondition = ensembleSignal < -0.5 and ensembleSignal[1] >= -0.5

// Execute trades
if (longCondition)
    strategy.entry("Long", strategy.long)

if (shortCondition)
    strategy.close("Long")

// Plot indicators
plot(fastMA, color=color.blue, title="Fast MA")
plot(slowMA, color=color.red, title="Slow MA")
plot(bbUpper, color=color.gray, title="BB Upper")
plot(bbLower, color=color.gray, title="BB Lower")

// Visual signals
plotshape(longCondition, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.labelup, text="BUY")
plotshape(shortCondition, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.labeldown, text="SELL")

// Signal strength indicator
signalColor = ensembleSignal > 0.5 ? color.green : ensembleSignal < -0.5 ? color.red : color.gray
bgcolor(color.new(signalColor, 95))'''
        return script
    
    @staticmethod
    def get_strategy_script(strategy_name, params, symbol="SPY"):
        """Get PineScript for a specific strategy"""
        if strategy_name == "Moving Average" or strategy_name == "moving_average":
            return PineScriptGenerator.generate_moving_average_strategy(
                params.get('fast_ma', 20), 
                params.get('slow_ma', 50), 
                symbol
            )
        elif strategy_name == "RSI" or strategy_name == "rsi":
            return PineScriptGenerator.generate_rsi_strategy(
                params.get('rsi_period', 14),
                params.get('oversold', 30),
                params.get('overbought', 70),
                symbol
            )
        elif strategy_name == "Risk_Adjusted" or strategy_name == "risk_adjusted":
            return PineScriptGenerator.generate_risk_adjusted_strategy(params, symbol)
        elif strategy_name == "AI_Ensemble" or strategy_name == "ensemble":
            components = params.get('components', ['ma', 'rsi', 'bb'])
            return PineScriptGenerator.generate_ensemble_strategy(components, symbol)
        else:
            return f"// PineScript generation not available for {strategy_name} strategy"